%% 训练脚本
%  mobilenet backbone  + softmax loss

%% 
addpath('./utils/');
inputSize = [112,112];
embedding_size = 512;


imds = imageDatastore('../dataSets/facebank/',...
    'IncludeSubfolders',true,...
    'LabelSource','foldernames',...
    'FileExtensions',{'.jpg','.png'});
imds.ReadFcn = @(x)preprocessTrain(x,inputSize);
numClasses = length(categories(imds.Labels));

%% network arc
backbone = mobilenetv2();
lg = layerGraph(backbone);
lg = removeLayers(lg,{'input_1',...
    'global_average_pooling2d_1',...
    'Logits','Logits_softmax',...
    'ClassificationLayer_Logits'});

newLayers = [globalAveragePooling2dLayer('name','avg'),...
    fullyConnectedLayer(numClasses,'name','fully'),...
    softmaxLayer('name','softmax'),...
    classificationLayer('name','cls')];

inputLayer = imageInputLayer([inputSize,3],'name','input');
lg = addLayers(lg,newLayers);
lg = addLayers(lg,inputLayer);
lg = connectLayers(lg,'input','Conv1');
lg = connectLayers(lg,'out_relu','avg');
analyzeNetwork(lg)

%% 冻结参数+train
lg = freezeWeights(lg,150);
options = trainingOptions('sgdm', ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.2, ...
    'LearnRateDropPeriod',5, ...
    'MaxEpochs',10, ...
    'MiniBatchSize',24, ...
    'Shuffle','every-epoch', ...
    'Verbose',false, ...
    'Plots','training-progress');
net = trainNetwork(imds,lg,options);
save('../models/faceRecogPth/mobilenetv2_softmax.mat','net')




